substitutions:

  name: 'airfreshener'
  location: 'home'
  room: 'toilet'

  comment: 'Освежитель воздуха'

  topic: 'esphome/home/toilet/airfreshener' # Желаемый топик устройства
  night_topic: 'home/mqtt/deep_night' # Откуда брать статус ночь
  update_time: '1s' # Интервал обновления для параметров

  sleep: '10min' # Длительность режима сна
  wake: '3400ms' # Длительность бодрствования (подбирается индивидуально, главное чтоб успел 3-и раза пшикнуть до сна)
  night_sleep: '60min' # Длительность режима сна ночью

  pin_motor: GPIO14 # Пин управляющий мотором (транзистором)


esphome:
  name: ${name}
  comment: ${comment}

  project:
      name: "Santa-Claus_16.AirFreshener"
      version: "1.1"

  platformio_options:
    build_flags: -DBEARSSL_SSL_BASIC -DMMU_IRAM_SIZE=0xC000 -DMMU_ICACHE_SIZE=0x4000 -DMMU_IRAM_HEAP

  on_boot:
    # Идем спать даже если нет подключений к Wi-Fi или MQTT
    priority: 500
    then:
      - wait_until: # Ждем подключения по Wi-Fi
          condition:
            wifi.connected:
          timeout: 5s # Максимум 5 секунд
      - if:
          condition:
            not:
              - wifi.connected:
          then: # Если Wi-Fi нет, ложимся спать.
            - logger.log: 'Do cats eat bats? Do cats eat bats?'
            - deep_sleep.enter: deep_sleep_mode
          else:
            - wait_until: # Ждем подключения к MQTT
                condition:
                  mqtt.connected:
                timeout: 5s # Максимум 5 секунд
            - if:
                condition:
                  not:
                    - mqtt.connected:
                then: # Если MQTT нет, ложимся спать.
                  - logger.log: 'Do bats eat cats?'
                  - deep_sleep.enter: deep_sleep_mode

esp8266:
  board: esp8285
  restore_from_flash: true

wifi:
  ssid: !secret ssid
  password: !secret pass
  fast_connect: true
  manual_ip:
    static_ip: 192.168.101.29
    gateway: 192.168.101.1
    subnet: 255.255.255.0
    dns1: 192.168.101.1
  use_address: 192.168.101.29
  power_save_mode: light

logger:
  baud_rate: 0

ota:
  - platform: esphome

# ------------------------------------------------------------------------------

# MQTT
mqtt:
  broker: !secret mqtt_ip
  username: !secret mqtt_login
  password: !secret mqtt_pass
  reboot_timeout: 0s # Отключаем бесконечный ребут при отсутствии подключения к MQTT
  topic_prefix: ${topic}
  birth_message:
  will_message:

  on_message:

    # Чтение состояния - была ли нажата кнопка (Отключение сна)
    - topic: ${topic}/button/deepsleep_stop/command
      payload: 'PRESS'
      then:
        - button.press: deep_sleep_mode_stop
        - binary_sensor.template.publish:
            id: check_sleep_button
            state: ON

    # Чтение состояния - была ли нажата кнопка (Кнопка)
    - topic: ${topic}/button/button/command
      payload: 'PRESS'
      then:
        - button.press: virtual_button

    # Чтение состояния - была ли нажата кнопка (Турбо-кнопка)
    - topic: ${topic}/button/button_turbo/command
      payload: 'PRESS'
      then:
        - button.press: virtual_button_turbo

    # Чтение состояния - была ли нажата кнопка (Кнопка сброса счетчика)
    - topic: ${topic}/button/button_count_reset/command
      payload: 'PRESS'
      then:
        - button.press: virtual_button_count_reset

    # Чтение состояния - ночь
    - topic: ${night_topic}
      payload: 'ON'
      then:
        - if:
            condition:
              lambda: 'return id(check_sleep_button).state;'
            then:
              - logger.log: 'Stay awake because the sleep button is pressed'
            else:
              - delay: ${wake}
              - logger.log: 'Night, I can sleep a little longer...'
              - deep_sleep.enter:
                  id: deep_sleep_mode
                  sleep_duration: ${night_sleep}

# ------------------------------------------------------------------------------

# Глубокий сон
deep_sleep:
  id: deep_sleep_mode
  sleep_duration: ${sleep}
  run_duration: ${wake}

# ------------------------------------------------------------------------------

globals:

  # Счетчик пшиков
  - id: click_count
    type: int
    restore_value: yes

# ------------------------------------------------------------------------------

output:

  # Пин управляющий мотором (транзистором)
  - platform: gpio
    pin:
      number: $pin_motor
      mode: OUTPUT
    id: motor

# ------------------------------------------------------------------------------

number:

  # Слайдер времени работы мотора при пшике
  - platform: template
    name: ${location}_${room}_${name}_motor_time
    icon: mdi:timer-cog
    id: motor_time
    optimistic: true
    restore_value: true
    mode: box
    unit_of_measurement: "ms"
    entity_category: "config"
    initial_value: 100
    min_value: 10
    max_value: 180
    step: 10

  # Вместимость баллона в пшиках
  - platform: template
    name: ${location}_${room}_${name}_balloon_max_click
    icon: mdi:spray
    id: max_click
    optimistic: true
    restore_value: true
    mode: box
    entity_category: "config"
    initial_value: 2400
    min_value: 100
    max_value: 3000
    step: 100
    
# ------------------------------------------------------------------------------

binary_sensor:

  # Сенсор нажатия кнопоки сна
  - platform: template
    name: check_sleep_button
    id: check_sleep_button
    internal: true

# ------------------------------------------------------------------------------

sensor:
  
  # Заряд аккумулятора
  - platform: adc
    pin: VCC
    name: ${location}_${room}_${name}_battery_voltage
    id: battery_voltage
    update_interval: ${update_time}
    filters:
      - max:
          window_size: 3
          send_every: 3
          send_first_at: 3
      - multiply: 0.981 # Погрешность
    on_value_range:
      below: 3.00
      then:
        - logger.log: 'Battery low, shutdown...'
        - button.press: halt

  # Заряд аккумулятора в процентах (показометр)
  - platform: template
    name: ${location}_${room}_${name}_battery_level
    device_class: battery
    state_class: measurement
    unit_of_measurement: "%"
    update_interval: ${update_time}
    accuracy_decimals: 0
    lambda: |-
      return ((id(battery_voltage).state));
    filters:
      - filter_out: nan
      - lambda: |-
          float result = ((x - 3.0) / (4.2 - 3.0)) * 100;
          if (result < 0) {
            return 0;
          } else if (result > 100) {
            return 100;
          } else {
            return result;
          }

  # Уровень баллона в процентах
  - platform: template
    name: ${location}_${room}_${name}_balloon_level
    icon: mdi:gas-cylinder
    state_class: measurement
    unit_of_measurement: "%"
    update_interval: ${update_time}
    accuracy_decimals: 0
    lambda: |-
      return id(click_count);
    filters:
      - filter_out: nan
      - lambda: |-
          float result = ((x / id(max_click).state) * 100 - 100) * -1;
          return result < 0 ? 0 : result;

  # Счетчик пшиков
  - platform: template
    name: ${location}_${room}_${name}_click_count
    state_class: measurement
    icon: mdi:counter
    update_interval: ${update_time}
    accuracy_decimals: 0
    lambda: |-
      return id(click_count);

  # Счетчик пшиков - коррекция
  - platform: mqtt_subscribe
    name: click_count_correction
    id: click_count_correction
    topic: ${topic}/click_count_correction
    on_value:
      then:
        - lambda: |-
            if (x >= 0) {
              id(click_count) = x;
            }
            id(clean_mqtt_click_count_correction).execute();
    internal: true

# ------------------------------------------------------------------------------

# Виртуальные кнопки
button:

  # Кнопка
  - platform: template
    name: ${location}_${room}_${name}_button
    id: virtual_button
    on_press:
      - logger.log: 'Button pressed!'
      - script.execute: clean_mqtt_click_buttons
      - script.execute: click
      - script.wait: click
    internal: true

  # Турбо кнопка
  - platform: template
    name: ${location}_${room}_${name}_button_turbo
    id: virtual_button_turbo
    on_press:
      - logger.log: 'Button Turbo pressed!'
      - script.execute: clean_mqtt_click_buttons
      - script.execute: click
      - script.wait: click
      - delay: 1s
      - script.execute: click
      - script.wait: click
      - delay: 1s
      - script.execute: click
      - script.wait: click
    internal: true

  # Кнопка остановки deep sleep
  - platform: template
    name: ${location}_${room}_${name}_deepsleep_stop
    id: deep_sleep_mode_stop
    on_press:
      - logger.log: 'Button Deep Sleep Stop pressed!'
      - deep_sleep.prevent: deep_sleep_mode
      - script.execute: clean_mqtt_deepsleep_stop
    internal: true

  # Кнопка сброса счетчика
  - platform: template
    name: ${location}_${room}_${name}_button_count_reset
    icon: mdi:restore-alert
    id: virtual_button_count_reset
    on_press:
      - logger.log: 'Button Count Reset pressed!'
      - script.execute: clean_click_count
      - script.execute: clean_mqtt_button_count_reset
    internal: true

  # Кнопка перезагрузки
  - platform: restart
    name: ${location}_${room}_${name}_reboot
    id: reboot
    icon: mdi:restart
    entity_category: "diagnostic"

  # Кнопка выключения
  - platform: shutdown
    name: shutdown
    id: halt
    internal: true

# ------------------------------------------------------------------------------

script:

  # Пшик
  - id: click
    then:
      - output.turn_on: motor
      - delay: !lambda "return (id(motor_time).state);"
      - output.turn_off: motor
      - script.execute: click_count_increment

  # Ложимся спать если сон не запрещен
  - id: go_sleep
    then:
      - if:
          condition:
            lambda: 'return id(check_sleep_button).state;'
          then:
            - logger.log: 'Stay awake because the sleep button is pressed'
          else:
            - deep_sleep.enter: deep_sleep_mode

  # Добавить +1 в счетчик пшиков
  - id: click_count_increment
    then:
      - lambda: |-
          id(click_count) += 1;

  # Обнулить счетчик пшиков
  - id: clean_click_count
    then:
      - lambda: |-
          id(click_count) = 0;

  # Стереть MQTT - Нажатие кнопкок пшиков
  - id: clean_mqtt_click_buttons
    then:
      - mqtt.publish:
          topic: ${topic}/button/button/command
          payload:
          retain: true
      - mqtt.publish:
          topic: ${topic}/button/button_turbo/command
          payload:
          retain: true

  # Стереть MQTT - Нажатие кнопки сброса счетчика пшиков
  - id: clean_mqtt_button_count_reset
    then:
      - mqtt.publish:
          topic: ${topic}/button/button_count_reset/command
          payload:
          retain: true

  # Стереть MQTT - Нажатие кнопки остановки сна
  - id: clean_mqtt_deepsleep_stop
    then:
      - mqtt.publish:
          topic: ${topic}/button/deepsleep_stop/command
          payload:
          retain: true

  # Стереть MQTT - Коррекция
  - id: clean_mqtt_click_count_correction
    then:
      - mqtt.publish:
          topic: ${topic}/click_count_correction
          payload:
          retain: true
