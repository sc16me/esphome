substitutions: # Будем использовать как константы
  name: 'home_toilet_airfreshener'
  comment: 'Освежитель воздуха (Дом-Туалет)'
  topic: 'esphome/home/toilet/airfreshener' # Желаемый топик устройства
  night_topic: 'esphome/home/toilet/airfreshener/night' # Откуда брать статус ночь
  update_time: '1s' # Интервал обновления для параметров
  sleep: '15min' # Длительность режима сна
  wake: '3s' # Длительность бодрствования
  night_sleep: '60min' # Длительность режима сна ночью
  night_wake: '2400ms' # Длительность бодрствования ночью (должна быть короче обычного режима)
  max_click: '2400' # Количество пшиков в баллоне (Airwick 2400)
  min_motor_time: '10' # Минимальное время работы мотора в мс
  max_motor_time: '120' # Максимальное время работы мотора в мс
  step_motor_time: '10' # Шаг слайдера времени работы мотора в мс

esphome:
  name: ${name}
  comment: ${comment}
  platform: ESP8266
  board: esp12e
  esp8266_restore_from_flash: true
  on_boot:
    # Идем спать даже если нет подключений к Wi-Fi или MQTT
    priority: 500
    then:
      - wait_until: # ждем подключения по Wi-Fi
          condition:
            wifi.connected:
          timeout: 5s # максимум 5 секунд
      - if:
          condition:
            not:
              - wifi.connected:
          then: # Если Wi-Fi нет, ложимся спать.
            - logger.log: 'Do cats eat bats? Do cats eat bats?'
            - deep_sleep.enter: deep_sleep_mode
          else:
            - wait_until: # ждем подключения к MQTT
                condition:
                  mqtt.connected:
                timeout: 5s # максимум 5 секунд
            - if:
                condition:
                  not:
                    - mqtt.connected:
                then: # Если MQTT нет, ложимся спать.
                  - logger.log: 'Do bats eat cats?'
                  - deep_sleep.enter: deep_sleep_mode

wifi:
  ssid: !secret ssid
  password: !secret pass
  fast_connect: true
  manual_ip:
    static_ip: 192.168.101.29
    gateway: 192.168.101.1
    subnet: 255.255.255.0
    dns1: 192.168.101.1
  use_address: 192.168.101.29
  power_save_mode: light

logger:
  baud_rate: 0

mdns:
  disabled: true

ota:

# ------------------------------------------------------------------------------

# MQTT
mqtt:
  broker: !secret mqtt_ip
  username: !secret mqtt_login
  password: !secret mqtt_pass
  reboot_timeout: 0s # отключаем бесконечный ребут при отсутствии подключения к MQTT
  topic_prefix: ${topic}
  birth_message:
  will_message:
  on_message:

    # Чтение состояния - была ли нажата кнопка (Отключение сна)
    - topic: ${topic}/button/${name}_deepsleep_stop/command
      payload: 'PRESS'
      then:
        - button.press: deep_sleep_mode_stop
        - binary_sensor.template.publish:
            id: check_sleep_button
            state: ON

    # Чтение состояния - была ли нажата кнопка (Кнопка)
    - topic: ${topic}/button/${name}_button/command
      payload: 'PRESS'
      then:
        - button.press: virtual_button

    # Чтение состояния - была ли нажата кнопка (Турбо-кнопка)
    - topic: ${topic}/button/${name}_button_turbo/command
      payload: 'PRESS'
      then:
        - button.press: virtual_button_turbo

    # Чтение состояния - была ли нажата кнопка (Кнопка сброса счетчика)
    - topic: ${topic}/button/${name}_button_count_reset/command
      payload: 'PRESS'
      then:
        - button.press: virtual_button_count_reset

    # Чтение состояния - ночь
    - topic: ${night_topic}
      payload: 'ON'
      then:
        - if:
            condition:
              lambda: 'return id(check_sleep_button).state;'
            then:
              - logger.log: 'Stay awake because the sleep button is pressed'
            else:
              - delay: ${night_wake}
              - logger.log: 'Night, I can sleep a little longer...'
              - deep_sleep.enter:
                  id: deep_sleep_mode
                  sleep_duration: ${night_sleep}

# ------------------------------------------------------------------------------

# Глубокий сон
deep_sleep:
  id: deep_sleep_mode
  sleep_duration: ${sleep}
  run_duration: ${wake}

# ------------------------------------------------------------------------------

switch:

  # Пин управляющий мотором (транзистором или реле)
  - platform: gpio
    name: ${name}_motor
    id: motor
    pin: GPIO14
    restore_mode: ALWAYS_OFF
    internal: true

# ------------------------------------------------------------------------------

number:

  # Счетчик пшиков
  - platform: template
    name: click_count
    id: click_count
    optimistic: true
    min_value: 0
    max_value: ${max_click}
    step: 1
    restore_value: true
    internal: true

  # Слайдер времени работы мотора при пшике
  - platform: template
    name: ${name}_motor_time
    id: ${name}_motor_time
    icon: mdi:timer-cog
    optimistic: true
    min_value: ${min_motor_time}
    max_value: ${max_motor_time}
    step: ${step_motor_time}
    restore_value: true
    
# ------------------------------------------------------------------------------

binary_sensor:

  # Сенсор нажатия кнопоки сна
  - platform: template
    name: check_sleep_button
    id: check_sleep_button
    internal: true

# ------------------------------------------------------------------------------

sensor:
  
  # Заряд аккумулятора
  - platform: adc
    pin: VCC
    name: ${name}_battery_voltage
    id: ${name}_battery_voltage
    update_interval: ${update_time}
    filters:
      - max:
          window_size: 3
          send_every: 3
          send_first_at: 3
      - multiply: 0.981 # погрешность
    on_value_range:
      below: 3.00
      then:
        - logger.log: 'Battery low, shutdown...'
        - button.press: ${name}_shutdown

  # Заряд аккумулятора в процентах (показометр)
  - platform: template
    name: ${name}_battery_level
    device_class: battery
    state_class: measurement
    unit_of_measurement: "%"
    update_interval: ${update_time}
    accuracy_decimals: 0
    lambda: |-
      return ((id(${name}_battery_voltage).state));
    filters:
      - filter_out: nan
      - lambda: return ((x - 3.0) / (4.2 - 3.0)) * 100;

  # Уровень баллона в процентах
  - platform: template
    name: ${name}_balloon_level
    icon: mdi:gas-cylinder
    state_class: measurement
    unit_of_measurement: "%"
    update_interval: ${update_time}
    accuracy_decimals: 0
    lambda: |-
      return ((id(click_count).state));
    filters:
      - filter_out: nan
      - lambda: return ((((x - 0) / (${max_click} - 0)) * 100 ) -100) * -1;

  # Счетчик пшиков
  - platform: template
    name: ${name}_click_count
    state_class: measurement
    icon: mdi:counter
    update_interval: ${update_time}
    accuracy_decimals: 0
    lambda: |-
      return ((id(click_count).state));

# ------------------------------------------------------------------------------

# Виртуальные кнопки
button:

  # Кнопка
  - platform: template
    name: ${name}_button
    id: virtual_button
    on_press:
      - logger.log: 'Button pressed!'
      # Стираем состояние кнопки перед выполнением
      - mqtt.publish:
          topic: ${topic}/button/${name}_button/command
          payload:
          retain: true
      # Стираем состояние кнопки перед выполнением
      - mqtt.publish:
          topic: ${topic}/button/${name}_button_turbo/command
          payload:
          retain: true
      - switch.turn_on: motor
      - delay: !lambda "return (id(${name}_motor_time).state);"
      - switch.turn_off: motor
      # Добавляем нажатие в счетчик
      - number.increment: click_count
      # Уходим спать сразу после пшика если режим сна не отключен
      - if:
          condition:
            lambda: 'return id(check_sleep_button).state;'
          then:
            - logger.log: 'Stay awake because the sleep button is pressed'
          else:
            - deep_sleep.enter: deep_sleep_mode
    internal: true

  # Турбо кнопка
  - platform: template
    name: ${name}_button_turbo
    id: virtual_button_turbo
    on_press:
      - logger.log: 'Button Turbo pressed!'
      # Стираем состояние кнопки перед выполнением
      - mqtt.publish:
          topic: ${topic}/button/${name}_button/command
          payload:
          retain: true
      # Стираем состояние кнопки перед выполнением
      - mqtt.publish:
          topic: ${topic}/button/${name}_button_turbo/command
          payload:
          retain: true
      - switch.turn_on: motor
      - delay: !lambda "return (id(${name}_motor_time).state);"
      - switch.turn_off: motor
      # Добавляем нажатие в счетчик
      - number.increment: click_count
      - delay: 1s
      - switch.turn_on: motor
      - delay: !lambda "return (id(${name}_motor_time).state);"
      - switch.turn_off: motor
      # Добавляем нажатие в счетчик
      - number.increment: click_count
      - delay: 1s
      - switch.turn_on: motor
      - delay: !lambda "return (id(${name}_motor_time).state);"
      - switch.turn_off: motor
      # Добавляем нажатие в счетчик
      - number.increment: click_count
      # Уходим спать сразу после пшика если режим сна не отключен
      - if:
          condition:
            lambda: 'return id(check_sleep_button).state;'
          then:
            - logger.log: 'Stay awake because the sleep button is pressed'
          else:
            - deep_sleep.enter: deep_sleep_mode
    internal: true

  # Кнопка остановки deep sleep
  - platform: template
    name: ${name}_deepsleep_stop
    id: deep_sleep_mode_stop
    on_press:
      - logger.log: 'Button Deep Sleep Stop pressed!'
      # Стираем состояние кнопки перед выполнением
      - mqtt.publish:
          topic: ${topic}/button/${name}_deepsleep_stop/command
          payload:
          retain: true
      - deep_sleep.prevent: deep_sleep_mode
    internal: true

  # Кнопка сброса счетчика
  - platform: template
    name: ${name}_button_count_reset
    icon: mdi:restore-alert
    id: virtual_button_count_reset
    on_press:
      - logger.log: 'Button Count Reset pressed!'
      # Стираем состояние кнопки перед выполнением
      - mqtt.publish:
          topic: ${topic}/button/${name}_button_count_reset/command
          payload:
          retain: true
      - number.to_min:
          id: click_count
    internal: true

  # Кнопка перезагрузки
  - platform: restart
    name: ${name}_reboot
    icon: mdi:restart

  # Кнопка выключения
  - platform: shutdown
    name: ${name}_shutdown
    id: ${name}_shutdown
    internal: true

# ------------------------------------------------------------------------------